name: Test and Publish to PyPI

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  get-pyproject-python-versions:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.parse.outputs.result }}
      min_python: ${{ steps.parse.outputs.min_python }}
      max_python: ${{ steps.parse.outputs.max_python }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Parse pyproject.toml
        uses: actions/github-script@v6
        id: parse
        with:
          script: |
            const fs = require('fs');
            const toml = require('toml');
            const assert = require('assert');

            try {
              const pyprojectToml = fs.readFileSync('pyproject.toml', 'utf8');
              const requiresMatch = pyprojectToml.match(/requires-python\s*=\s*['"]([^'"]+)['"]/);
              if (!requiresMatch) {
                throw new Error("no reuires-python key-value found");
              }
              const requiresPython = requiresMatch[1];
              const minVerMatch = requiresPython.match(/>=(\d+)\.(\d+)/);
              if (!minVerMatch) {
                throw new Error("No minimum version specified with '>='")
              }
              const maxVerMatch = requiresPython.match(/<=(\d+)\.(\d+)/);
              if (!maxVerMatch) {
                throw new Error("No maximum version specified with '<='");
              }
              if (minVerMatch[1] !== maxVerMatch[1]) {
                throw new Error(`major version of min (${minVerMatch[1]}) and max (${maxVerMatch[1]}) don't agree`);
              }
              core.setOutput("min_python", minVerMatch[0]);
              core.setOutput("max_python", maxVerMatch[0]);
              const minMajor = parseInt(minVerMatch[1], 10);
              const minMinor = parseInt(minVerMatch[2], 10);
              const maxMinor = parseInt(maxVerMatch[2], 10);
              assert(maxMinor >= minMinor, "max version is not greater than or equal to min version");
              let minor = minMinor;
              const versions = [];
              while (minor <= maxMinor) {
                versions.push(`${minMajor}.${minor}`);
                minor++;
              }
              return JSON.stringify(versions);
            catch (error) {
              core.setFailed(error.message);
            }

  # Build a pure Python wheel and upload as an artifact
  build-wheel:
    runs-on: ubuntu-latest
    needs: get-pyproject-python-versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Random123
        uses: actions/checkout@v4
        with:
          repository: "DEShawResearch/random123"
          ref: v1.14.0
          path: bumps/dream/random123

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.get-pyproject-python-versions.outputs.min_python }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: build webview
        run: |
          cd bumps/webview/client
          npm install
          npm run build
      - name: Create the wheel
        run: uv build

      - name: Upload the wheel and source distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            dist/bumps-*-py3-none-any.whl
            dist/bumps-*.tar.gz

  generate-additional-versions:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.generate-include.outputs.result }}
    steps:
      - name: Generate additional versions
        uses: actions/github-script@v6
        id: generate-include
        with:
          script: |
            const assert = require("assert");
            const minver = process.env.MIN_PYTHON.split(".").map((s) => +s);
            const maxver = process.env.MAX_PYTHON.split(".").map((s) => +s);
            assert(minver[0] === maxver[0], "Python major versions must match");
            const additional_versions = [];
            const min_minor = minver[1];
            const max_minor = maxver[1];
            // skip the minver, as it is already included
            let minor = min_minor + 1;
            while (minor <= max_minor) {
              additional_versions.push({ os: "ubuntu-latest", py: `${minver[0]}.${minor}` });
              minor++;
            }
            return JSON.stringify(additional_versions);
          result-encoding: string
      - name: Print versions
        run: echo '${{ steps.generate-include.outputs.result }}'

# Test the wheel on different platforms, test webview, and check docs build
  test:
    runs-on: ${{ matrix.os }}
    needs: 
      - build-wheel
      - get-pyproject-python-versions
    env:
      MIN_PYTHON: ${{ needs.get-pyproject-python-versions.outputs.min_python }}

    strategy:
      matrix:
        os: ["ubuntu-latest"]
        py: ${{ fromJson(needs.get-pyproject-python-versions.outputs.result) }}
        include: 
          - os: windows-latest
            py: "" # placeholder, will use default version
          - os: macos-latest
            py: ""
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python ${{ matrix.py || env.MIN_PYTHON}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py || env.MIN_PYTHON}}

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: dist

      - name: Install the wheel
        run: |
          uv venv
          find dist -name "bumps-*-py3-none-any.whl" -exec uv pip install {}[dev] \;

      - name: Run tests
        run: uv run python -m pytest -v

      - name: Check examples
        run: uv run python check_examples.py --chisq

      - name: Check fitters
        run: uv run python check_fitters.py

      - name: Check that the docs build (linux only)
        if: ${{ matrix.py == env.MIN_PYTHON && matrix.os == 'ubuntu-latest' }}
        run: |
          source .venv/bin/activate
          make -j 4 -C doc SPHINXOPTS="-W --keep-going -n" html
  # Upload wheel to PyPI only when a tag is pushed, and its name begins with 'v'
  upload-to-pypi:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write
    steps:
      - name: Retrieve all artifacts
        uses: actions/download-artifact@v4

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifacts/
