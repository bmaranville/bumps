name: Test and Publish to PyPI

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  MIN_PYTHON: "3.11"
  MAX_PYTHON: "3.13"

jobs:
  # Build a pure Python wheel and upload as an artifact
  build-wheel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Random123
        uses: actions/checkout@v4
        with:
          repository: "DEShawResearch/random123"
          ref: v1.14.0
          path: bumps/dream/random123

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MIN_PYTHON }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: build webview
        run: |
          cd bumps/webview/client
          npm install
          npm run build
      - name: Create the wheel
        run: uv build

      - name: Upload the wheel and source distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            dist/bumps-*-py3-none-any.whl
            dist/bumps-*.tar.gz

  generate-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Generate matrix
        uses: actions/github-script@v6
        id: generate-matrix
        with:
          script: |
            const assert = require("assert");
            const minver = process.env.MIN_PYTHON.split(".").map((s) => +s);
            const maxver = process.env.MAX_PYTHON.split(".").map((s) => +s);
            console.log({minver, maxver});
            console.log("process.env:", process.env);
            assert(minver[0] === maxver[0], "Python major versions must match");
            const additional_versions = [];
            const min_minor = minver[1];
            const max_minor = maxver[1];
            // skip the minver, as it is already included
            let minor = min_minor + 1;
            while (minor <= max_minor) {
              additional_versions.push({ py: `${minver[0]}.${minor}` });
              minor++;
            }
            console.log({additional_versions});
            core.setOutput("include", JSON.stringify(additional_versions));
            return JSON.stringify(additional_versions);
          result-encoding: string

# Test the wheel on different platforms, test webview, and check docs build
  test:
    runs-on: ${{ matrix.os }}
    needs: 
      - build-wheel
      - generate-matrix

    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        # all additional supported python versions
        include: ${{ fromJson(needs.generate-matrix.outputs.generate-matrix.result) }}

      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python ${{ matrix.py || env.MIN_PYTHON}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py || env.MIN_PYTHON}}

      - name: Download the wheel
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: dist

      - name: Install the wheel
        run: |
          uv venv
          find dist -name "bumps-*-py3-none-any.whl" -exec uv pip install {}[dev] \;

      - name: Run tests
        run: uv run python -m pytest -v

      - name: Check examples
        run: uv run python check_examples.py --chisq

      - name: Check fitters
        run: uv run python check_fitters.py

      - name: Check that the docs build (linux only)
        if: matrix.py == null && matrix.os == 'ubuntu-latest'
        run: |
          source .venv/bin/activate
          make -j 4 -C doc SPHINXOPTS="-W --keep-going -n" html
  # Upload wheel to PyPI only when a tag is pushed, and its name begins with 'v'
  upload-to-pypi:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write
    steps:
      - name: Retrieve all artifacts
        uses: actions/download-artifact@v4

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifacts/
