name: Build conda-packed distribution

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  branch_name: master
  PACKAGE_NAME: bumps

jobs:
  build_and_publish:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { os: ubuntu-latest, py: "3.11" }
          - { os: windows-latest, py: "3.11" }
          - { os: macos-latest, py: "3.11" }
          - { os: macos-13, py: "3.11" }
          # all using to stable abi

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ env.branch_name }}
        fetch-depth: 0

    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.config.py }}
        miniforge-version: latest
        activate-environment: builder

    - name: Build conda-packed (all platforms)
      shell: bash -el {0}
      run: |
        conda install -y versioningit nodejs
        ./extra/build_conda_packed.sh

    - name: Create MacOS App
      if: startsWith(matrix.config.os, 'macos')
      shell: bash -el {0}
      env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_ISA }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_ISA_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          NOTARIZATION_USERNAME: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          NOTARIZATION_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain
        security find-identity -p codesigning

        echo "Creating MacOS App"
        # This assumes that conda-packed enviroment exists at "conda_packed/env"

        VERSION=$(versioningit)
        FULL_PACKAGE_NAME="$PACKAGE_NAME-$VERSION-$(uname -s)-$(uname -m)"
        APP="app_build/$FULL_PACKAGE_NAME.app"
        mkdir -p app_build
        ln -s /Applications app_build/Applications
        cp -r "extra/BumpsWebviewTemplate.app" "$APP"
        cp -R -P "conda_packed/env" "$APP/Contents/Resources"
        plutil -replace CFBundleVersion -string "$VERSION" "$APP/Contents/Info.plist"

        #  Do signing...
        find $APP -name "*\.so" -print0 | xargs -0 -I {} codesign --force --timestamp --options=runtime --verify --verbose=4 --sign 'Developer ID Application: The International Scattering Alliance (8CX8K63BQM)' {}
        find $APP -name "*\.dylib" -print0 | xargs -0 -I {} codesign --force --timestamp --options=runtime --verify --verbose=4 --sign 'Developer ID Application: The International Scattering Alliance (8CX8K63BQM)' {}
        find "$APP/Contents/Resources/bin" -type f -perm +111 -print0 | xargs -0 -I {} codesign --force --timestamp --options=runtime --verify --verbose=4 --sign 'Developer ID Application: The International Scattering Alliance (8CX8K63BQM)' {}

        codesign --verify --options=runtime --entitlements $APP/Contents/Entitlements.plist --timestamp --deep --verbose=4 --force --sign "Developer ID Application: The International Scattering Alliance (8CX8K63BQM)" $APP
        DMG="artifacts/$FULL_PACKAGE_NAME.dmg"
        mkdir -p artifacts
        hdiutil create $DMG -srcfolder app_build -ov -format UDZO
        codesign -s "Developer ID Application: The International Scattering Alliance (8CX8K63BQM)" $DMG

        # Clean up signing keys
        security delete-keychain build.keychain
        rm certificate.p12

        # Notarize
        xcrun notarytool submit --wait --apple-id $NOTARIZATION_USERNAME --password $NOTARIZATION_PASSWORD --team-id 8CX8K63BQM $DMG

        # Staple
        xcrun stapler staple $DMG

    - name: Create Windows Installer
      if: startsWith(matrix.config.os, 'windows')
      shell: bash -el {0}
      run: |
        echo "Creating Windows Installer"
        # This assumes that conda-packed enviroment exists at "conda_packed/env"
        VERSION=$(versioningit)

        FULL_PACKAGE_NAME="$PACKAGE_NAME-$VERSION-Windows-$(uname -m)"

        # clean up junk from conda-pack operation:
        find conda_packed -name "*.conda_trash" -delete

        cp extra/platform_scripts/windows/* conda_packed/
        conda install -y nsis

        # create the installer:
        PRODUCT_NAME="$PACKAGE_NAME-$VERSION"
        $CONDA_PREFIX/NSIS/makensis.exe -DPRODUCT_NAME="$PRODUCT_NAME" extra/installer.nsi

        mkdir -p artifacts
        mv extra/BumpsWebviewSetup.exe "artifacts/$FULL_PACKAGE_NAME-installer.exe"

    - name: Create Linux Installer
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        echo "Creating Linux Installer"
        conda info

        VERSION=$(versioningit)
        FULL_PACKAGE_NAME="$PACKAGE_NAME-$VERSION-$(uname -s)-$(uname -m)"

        cp extra/platform_scripts/linux/* conda_packed/

        mv conda_packed/ "$PACKAGE_NAME-$VERSION"
        mkdir -p artifacts
        tar -czf "artifacts/$FULL_PACKAGE_NAME.tar.gz" "$PACKAGE_NAME-$VERSION"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.config.os }}-${{ matrix.config.py }}
        path: artifacts/*

    - name: Enumerate artifacts
      shell: bash -el {0}
      run: |
        # Collect the distributables
        {
          echo 'DISTRIBUTABLES<<EOF'
          ls artifacts/*
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Update current release
      if: startsWith(github.ref, 'refs/tags')
      uses: johnwbyrd/update-release@v1.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ${{ env.DISTRIBUTABLES }}
